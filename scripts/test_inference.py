#!/usr/bin/env python3
"""
Script de test d'inf√©rence pour le mod√®le Iris Triton
Teste le mod√®le d√©ploy√© via KServe avec Triton Inference Server
"""

import requests
import json
import numpy as np
import argparse
import sys
from typing import Dict, List, Any

# Configuration par d√©faut
DEFAULT_MODEL_NAME = "iris_classifier"
DEFAULT_MODEL_VERSION = "1"

# Donn√©es de test Iris (features: sepal_length, sepal_width, petal_length, petal_width)
SAMPLE_DATA = {
    "setosa": [5.1, 3.5, 1.4, 0.2],
    "versicolor": [6.2, 2.9, 4.3, 1.3],
    "virginica": [6.3, 3.3, 6.0, 2.5]
}

# Mapping des classes
CLASS_NAMES = ["setosa", "versicolor", "virginica"]

def prepare_triton_request(input_data: List[List[float]], 
                          model_name: str = DEFAULT_MODEL_NAME) -> Dict[str, Any]:
    """
    Pr√©pare la requ√™te au format Triton Inference Server v2 protocol
    """
    return {
        "inputs": [
            {
                "name": "input_features",
                "shape": [len(input_data), 4],
                "datatype": "FP32",
                "data": [item for sublist in input_data for item in sublist]
            }
        ],
        "outputs": [
            {
                "name": "predictions"
            },
            {
                "name": "probabilities"
            }
        ]
    }

def send_inference_request(url: str, data: Dict[str, Any], 
                          timeout: int = 30) -> requests.Response:
    """
    Envoie une requ√™te d'inf√©rence au serveur Triton
    """
    headers = {
        "Content-Type": "application/json",
    }
    
    try:
        response = requests.post(url, 
                               headers=headers, 
                               data=json.dumps(data), 
                               timeout=timeout)
        response.raise_for_status()
        return response
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la requ√™te: {e}")
        sys.exit(1)

def parse_triton_response(response: requests.Response) -> Dict[str, Any]:
    """
    Parse la r√©ponse du serveur Triton
    """
    try:
        result = response.json()
        
        # Extraire les pr√©dictions
        predictions_output = None
        probabilities_output = None
        
        for output in result.get("outputs", []):
            if output["name"] == "predictions":
                predictions_output = output
            elif output["name"] == "probabilities":
                probabilities_output = output
        
        if not predictions_output:
            raise ValueError("Sortie 'predictions' non trouv√©e dans la r√©ponse")
        
        predictions = predictions_output["data"]
        probabilities = probabilities_output["data"] if probabilities_output else None
        
        return {
            "predictions": predictions,
            "probabilities": probabilities,
            "shape": predictions_output["shape"]
        }
    except (json.JSONDecodeError, KeyError, ValueError) as e:
        print(f"‚ùå Erreur lors du parsing de la r√©ponse: {e}")
        print(f"R√©ponse brute: {response.text}")
        sys.exit(1)

def format_results(parsed_response: Dict[str, Any], 
                  input_samples: List[str]) -> None:
    """
    Formate et affiche les r√©sultats
    """
    predictions = parsed_response["predictions"]
    probabilities = parsed_response["probabilities"]
    
    print("\nüîç R√âSULTATS D'INF√âRENCE")
    print("=" * 50)
    
    for i, sample_name in enumerate(input_samples):
        pred_class_idx = int(predictions[i])
        pred_class_name = CLASS_NAMES[pred_class_idx]
        
        print(f"\nüìä √âchantillon: {sample_name}")
        print(f"   Pr√©diction: {pred_class_name} (classe {pred_class_idx})")
        
        if probabilities:
            # Afficher les probabilit√©s pour chaque classe
            print("   Probabilit√©s:")
            start_idx = i * 3
            for j, class_name in enumerate(CLASS_NAMES):
                prob = probabilities[start_idx + j]
                print(f"     - {class_name}: {prob:.4f} ({prob*100:.2f}%)")

def test_health_check(base_url: str) -> bool:
    """
    Teste si le serveur Triton est accessible
    """
    health_url = f"{base_url}/v2/health/ready"
    
    try:
        response = requests.get(health_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Serveur Triton accessible")
            return True
        else:
            print(f"‚ö†Ô∏è  Serveur Triton non pr√™t (status: {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Impossible de contacter le serveur: {e}")
        return False

def test_model_metadata(base_url: str, model_name: str, model_version: str) -> bool:
    """
    R√©cup√®re les m√©tadonn√©es du mod√®le
    """
    metadata_url = f"{base_url}/v2/models/{model_name}/versions/{model_version}"
    
    try:
        response = requests.get(metadata_url, timeout=10)
        if response.status_code == 200:
            metadata = response.json()
            print(f"‚úÖ Mod√®le {model_name} v{model_version} disponible")
            print(f"   Platform: {metadata.get('platform', 'N/A')}")
            print(f"   Inputs: {len(metadata.get('inputs', []))}")
            print(f"   Outputs: {len(metadata.get('outputs', []))}")
            return True
        else:
            print(f"‚ùå Mod√®le non trouv√© (status: {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur m√©tadonn√©es: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Test d'inf√©rence pour le mod√®le Iris Triton")
    parser.add_argument("--url", "-u", 
                       default="http://iris-classifier-triton-rhods-notebooks.apps.your-cluster.com",
                       help="URL de base du service d'inf√©rence")
    parser.add_argument("--model-name", "-m", 
                       default=DEFAULT_MODEL_NAME,
                       help="Nom du mod√®le")
    parser.add_argument("--model-version", "-v", 
                       default=DEFAULT_MODEL_VERSION,
                       help="Version du mod√®le")
    parser.add_argument("--samples", "-s", 
                       nargs="+",
                       default=["setosa", "versicolor", "virginica"],
                       choices=list(SAMPLE_DATA.keys()),
                       help="√âchantillons √† tester")
    parser.add_argument("--custom-data", 
                       help="Donn√©es personnalis√©es au format JSON: [[5.1,3.5,1.4,0.2]]")
    
    args = parser.parse_args()
    
    print("üöÄ D√âMARRAGE DU TEST D'INF√âRENCE TRITON")
    print("=" * 50)
    print(f"URL: {args.url}")
    print(f"Mod√®le: {args.model_name} v{args.model_version}")
    
    # Test de sant√© du serveur
    if not test_health_check(args.url):
        sys.exit(1)
    
    # Test des m√©tadonn√©es du mod√®le
    if not test_model_metadata(args.url, args.model_name, args.model_version):
        sys.exit(1)
    
    # Pr√©parer les donn√©es d'entr√©e
    if args.custom_data:
        try:
            input_data = json.loads(args.custom_data)
            sample_names = [f"custom_{i}" for i in range(len(input_data))]
        except json.JSONDecodeError:
            print("‚ùå Format JSON invalide pour --custom-data")
            sys.exit(1)
    else:
        input_data = [SAMPLE_DATA[sample] for sample in args.samples]
        sample_names = args.samples
    
    print(f"\nüìã Test avec {len(input_data)} √©chantillon(s)")
    
    # Pr√©parer la requ√™te Triton
    triton_request = prepare_triton_request(input_data, args.model_name)
    
    # URL d'inf√©rence
    inference_url = f"{args.url}/v2/models/{args.model_name}/versions/{args.model_version}/infer"
    
    print(f"\nüîÑ Envoi de la requ√™te d'inf√©rence...")
    print(f"URL: {inference_url}")
    
    # Envoyer la requ√™te
    response = send_inference_request(inference_url, triton_request)
    
    # Parser et afficher les r√©sultats
    parsed_response = parse_triton_response(response)
    format_results(parsed_response, sample_names)
    
    print(f"\n‚úÖ Test d'inf√©rence termin√© avec succ√®s!")
    print(f"Status: {response.status_code}")
    print(f"Temps de r√©ponse: {response.elapsed.total_seconds():.3f}s")

if __name__ == "__main__":
    main()
